{"version":3,"sources":["serviceWorker.js","components/video-dropdown/video-dropdown.js","components/controls/controls.js","components/display/display.js","App.js","store/reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","getMovies","a","fetch","data","json","categories","movies","connect","dispatch","setVideoSrc","movie","type","payload","src","sources","videoInfo","description","title","props","useState","setMovies","useEffect","then","videos","className","List","map","i","ListItem","key","Card","CardActionArea","onClick","CardMedia","image","thumb","CardContent","Typography","component","gutterBottom","variant","subtitle","color","state","brightness","play","video","volume","setVideoPlayPause","setVideoVolume","setVideoBrightness","id","Button","disabled","size","Pause","PlayArrow","VolumeDown","Slider","defaultValue","max","min","onChange","event","newVolume","step","value","VolumeUp","Brightness4","newBrightness","Brightness5","videoSrc","vidRef","useRef","current","pause","style","filter","source","autoPlay","ref","renderVideo","App","initialState","reducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f44ffea.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './video-dropdown.scss';\r\nimport { Card, CardActionArea, CardContent, CardMedia, List, ListItem } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst VideoDropdown = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getMovies().then((data) => {\r\n            setMovies(data.videos);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"video__wrapper\">\r\n            <List className=\"video__list\">\r\n                {movies.map((movie, i) => {\r\n                    return (\r\n                        <ListItem className=\"video__list__item\" key={i}>\r\n                            <Card className=\"video__card\">\r\n                                <CardActionArea\r\n                                    onClick={() => {\r\n                                        props.setVideoSrc(movie);\r\n                                    }}\r\n                                >\r\n                                    <div className=\"video__card-info\">\r\n                                        <CardMedia\r\n                                            className=\"video__media\"\r\n                                            image={movie.thumb}\r\n                                            title={movie.title}\r\n                                        />\r\n                                        <CardContent className=\"video__card-content\">\r\n                                            <div className=\"video__title\">\r\n                                                <Typography\r\n                                                    component=\"h2\"\r\n                                                    gutterBottom\r\n                                                    variant=\"h5\"\r\n                                                >\r\n                                                    {movie.title}\r\n                                                </Typography>\r\n                                                <Typography\r\n                                                    component=\"h3\"\r\n                                                    gutterBottom\r\n                                                    variant=\"subtitle2\"\r\n                                                >\r\n                                                    {movie.subtitle}\r\n                                                </Typography>\r\n                                            </div>\r\n                                            <Typography\r\n                                                className=\"video__description\"\r\n                                                color=\"textSecondary\"\r\n                                                component=\"p\"\r\n                                                variant=\"body2\"\r\n                                            >\r\n                                                {movie.description}\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </div>\r\n                                </CardActionArea>\r\n                            </Card>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getMovies = async () => {\r\n    const data = await fetch('https://api.jsonbin.io/b/5ef6965097cb753b4d188f19/1'); // ('https://api.jsonbin.io/b/5ef409df2406353b2e0c4068');\r\n    const {\r\n        categories: [movies]\r\n    } = await data.json();\r\n\r\n    return movies;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setVideoSrc: (movie) => {\r\n            dispatch({\r\n                type: 'VIDEO_SRC',\r\n                payload: {\r\n                    src: movie.sources[0],\r\n                    videoInfo: {\r\n                        description: movie.description,\r\n                        title: movie.title\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(VideoDropdown);\r\n","import './controls.scss';\r\nimport { Button, Slider } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport React from 'react';\r\nimport VideoDropdown from '../video-dropdown/video-dropdown';\r\nimport {\r\n    Brightness4,\r\n    Brightness5,\r\n    Pause,\r\n    PlayArrow,\r\n    VolumeDown,\r\n    VolumeUp\r\n} from '@material-ui/icons';\r\n\r\nconst Controls = (props) => {\r\n    const handleVolumeChange = (event, newVolume) => {\r\n        props.setVideoVolume(newVolume);\r\n    };\r\n\r\n    const handleBrightnessChange = (event, newBrightness) => {\r\n        props.setVideoBrightness(newBrightness);\r\n    };\r\n\r\n    return (\r\n        <div className=\"controls\" id=\"video-controls\">\r\n            <div className=\"controls__buttons\">\r\n                <Button\r\n                    className=\"controls__buttons__play-pause\"\r\n                    color=\"primary\"\r\n                    disabled={!props.video}\r\n                    id=\"play-pause\"\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    onClick={() => {\r\n                        props.setVideoPlayPause();\r\n                    }}\r\n                >\r\n                    {props.play ? <Pause /> : <PlayArrow />}\r\n                </Button>\r\n                <div className=\"controls__buttons__volume\">\r\n                    <VolumeDown />\r\n                    <Slider\r\n                        className=\"controls__volume__slider\"\r\n                        defaultValue={1}\r\n                        disabled={!props.video}\r\n                        id=\"volume-bar\"\r\n                        max={1}\r\n                        min={0}\r\n                        onChange={handleVolumeChange}\r\n                        step={0.01}\r\n                        value={props.volume}\r\n                    />\r\n                    <VolumeUp />\r\n                </div>\r\n                <div className=\"controls__buttons__brightness\">\r\n                    <Brightness4 />\r\n                    <Slider\r\n                        className=\"controls__brightness__slider\"\r\n                        defaultValue={1}\r\n                        disabled={!props.video}\r\n                        id=\"volume-bar\"\r\n                        max={1}\r\n                        min={0}\r\n                        onChange={handleBrightnessChange}\r\n                        step={0.01}\r\n                        value={props.brightness}\r\n                    />\r\n                    <Brightness5 />\r\n                </div>\r\n            </div>\r\n            <VideoDropdown />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        brightness: state.brightness,\r\n        play: state.play,\r\n        video: state.video,\r\n        volume: state.volume\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setVideoPlayPause: () => {\r\n            dispatch({\r\n                type: 'VIDEO_PLAY'\r\n            });\r\n        },\r\n        setVideoVolume: (volume) => {\r\n            dispatch({\r\n                type: 'VIDEO_VOLUME',\r\n                payload: {\r\n                    volume\r\n                }\r\n            });\r\n        },\r\n        setVideoBrightness: (brightness) => {\r\n            dispatch({\r\n                type: 'VIDEO_BRIGHTNESS',\r\n                payload: {\r\n                    brightness\r\n                }\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\r\n","import './display.scss';\r\nimport { connect } from 'react-redux';\r\nimport React, { useRef } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Display = (props) => {\r\n    const vidRef = useRef();\r\n\r\n    if (vidRef.current) {\r\n        props.play ? vidRef.current.play() : vidRef.current.pause();\r\n        vidRef.current.volume = props.volume;\r\n        vidRef.current.style.filter = `brightness(${props.brightness})`;\r\n    }\r\n\r\n    const renderVideo = (source) => {\r\n        let video = <div className=\"display__video\"></div>;\r\n\r\n        if (source) {\r\n            video = (\r\n                <div className=\"display__video\">\r\n                    <video className=\"display__video__image\" autoPlay ref={vidRef} key={source}>\r\n                        <source src={source} type=\"video/mp4\"></source>\r\n                    </video>\r\n                    <div className=\"display__video__info\">\r\n                        <Typography color=\"primary\" component=\"h1\" variant=\"h3\">\r\n                            {props.videoInfo.title}\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" component=\"p\" variant=\"body2\">\r\n                            {props.videoInfo.description}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return video;\r\n    };\r\n\r\n    return <div className=\"display\">{renderVideo(props.videoSrc)}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        brightness: state.brightness,\r\n        play: state.play,\r\n        videoInfo: state.videoInfo,\r\n        videoSrc: state.video,\r\n        volume: state.volume\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Display);\r\n","import './App.scss';\nimport Controls from './components/controls/controls';\nimport Display from './components/display/display';\nimport React from 'react';\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <Display />\n            <Controls />\n        </div>\n    );\n};\n\nexport default App;\n","const initialState = {\r\n    brightness: 1,\r\n    play: false,\r\n    video: '',\r\n    videoInfo: {},\r\n    volume: 1\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'VIDEO_SRC':\r\n            return {\r\n                ...state,\r\n                brightness: 1,\r\n                play: true,\r\n                video: action.payload.src,\r\n                videoInfo: {\r\n                    ...action.payload.videoInfo\r\n                },\r\n                volume: 1\r\n            };\r\n\r\n        case 'VIDEO_PLAY':\r\n            return {\r\n                ...state,\r\n                play: !state.play\r\n            };\r\n\r\n        case 'VIDEO_VOLUME':\r\n            return {\r\n                ...state,\r\n                volume: action.payload.volume\r\n            };\r\n\r\n        case 'VIDEO_BRIGHTNESS':\r\n            return {\r\n                ...state,\r\n                brightness: action.payload.brightness\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import './index.scss';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reducer from './store/reducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}